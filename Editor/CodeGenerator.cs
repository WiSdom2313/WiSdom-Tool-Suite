using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.IO;
using System.Linq;
using UnityEngine;

public static class CodeGenerator
{
    public static void GenerateClass()
    {
        var syntaxFactory = SyntaxFactory.CompilationUnit();

        // Add using directives
        syntaxFactory = syntaxFactory.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System")));

        // Create a namespace
        var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName("GeneratedCode"));

        // Create a class
        var classDeclaration = SyntaxFactory.ClassDeclaration("AutoGeneratedClass")
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

        // Add a simple method
        var methodDeclaration = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), "GeneratedMethod")
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
            .WithBody(SyntaxFactory.Block());

        classDeclaration = classDeclaration.AddMembers(methodDeclaration);
        namespaceDeclaration = namespaceDeclaration.AddMembers(classDeclaration);
        syntaxFactory = syntaxFactory.AddMembers(namespaceDeclaration);

        // Generate code
        var code = syntaxFactory.NormalizeWhitespace().ToFullString();

        // Save to a file or use within Unity
        Debug.Log(code);
        File.WriteAllText("Assets/Generated/AutoGeneratedClass.cs", code);
    }
}
