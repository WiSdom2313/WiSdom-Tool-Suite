using System;
using System.Collections.Concurrent;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Cysharp.Threading.Tasks;
using MessagePack;
using UnityEngine;
using WiSdom.DesignPattern;
using WiSdom.SaveSystem.Data;

namespace WiSdom.SaveSystem
{
    public class DataManager : SingletonMonoBehaviour<DataManager>
    {
        #region Fields
        public static bool ISALLDATALOADED = false;
        public static bool ISDATACHANGE = false;
        #endregion

        #region Methods

        #endregion


        #region Field Generators
        public PlayerData PlayerData;
        public SettingsData SettingsData;
        #endregion


        /* --------------------WARNING--------------------
        // Do not modify this region
        // All Data in this region is generated by the WiSdomToolSuite
        */
        #region Auto Generators
        public async UniTaskVoid LoadAllData()
        {
            ISALLDATALOADED = false;
            #region Load Data
            await LoadPlayerDataData();
            await LoadSettingsDataData();
            #endregion
            ISALLDATALOADED = true;

        }
        public async UniTaskVoid SaveAllData()
        {
            ISDATACHANGE = true;
            #region Save Data
            await SavePlayerDataData();
            await SaveSettingsDataData();
            #endregion
            ISDATACHANGE = false;
        }

        public void ClearAllData()
        {
            #region Clear Data
            SaveManager.ClearData("PlayerData");
            SaveManager.ClearData("SettingsData");
            #endregion
        }

        #region Methods Generators
        public async UniTask LoadPlayerDataData()
        {
            PlayerData = await SaveManager.LoadData<PlayerData>("PlayerData");
        }
        public async UniTask SavePlayerDataData()
        {
            await SaveManager.SaveData(PlayerData, "PlayerData");
        }
        public void ClearPlayerDataData()
        {
            SaveManager.ClearData("PlayerData");
        }
        public async UniTask LoadSettingsDataData()
        {
            SettingsData = await SaveManager.LoadData<SettingsData>("SettingsData");
        }
        public async UniTask SaveSettingsDataData()
        {
            await SaveManager.SaveData(SettingsData, "SettingsData");
        }
        public void ClearSettingsDataData()
        {
            SaveManager.ClearData("SettingsData");
        }
        #endregion
        #endregion
        // --------------------THE END--------------------
    }
}